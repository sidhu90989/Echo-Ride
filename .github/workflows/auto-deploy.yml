name: CI - build & optional deploy

on:
  push:
    branches: [ main, chore/** ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (client + server)
        working-directory: ./
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecoride-build
          path: |
            EcoRideConnect/dist

  deploy-render:
    needs: build
    runs-on: ubuntu-latest
    env:
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    steps:
      - name: Trigger Render deploy (if secrets present)
        if: ${{ env.RENDER_SERVICE_ID != '' && env.RENDER_API_KEY != '' }}
        run: |
          echo "Triggering Render deploy for service $RENDER_SERVICE_ID"
          curl -s -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          | jq -r '.message, .id'

  deploy-vercel:
    needs: build
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      # Prefer repository variable for non-secret ID
      VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID }}
      HAS_VERCEL: ${{ secrets.VERCEL_TOKEN != '' && 'true' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Build client (for Vercel)
        if: ${{ env.HAS_VERCEL != '' }}
        working-directory: EcoRideConnect
        run: |
          npm ci
          # VERCEL=1 ensures our Vite outDir targets client/dist
          VERCEL=1 npm run build

      - name: Deploy frontend to Vercel (if configured)
        if: ${{ env.HAS_VERCEL != '' }}
        working-directory: EcoRideConnect
        env:
          DEFAULT_PROJECT_ID: prj_eYvqk3ED2nSMx7CgskpTlNqQmzyL
        run: |
          # Use repo variable if present, else fallback to provided ID
          PROJECT_ID="${VERCEL_PROJECT_ID:-$DEFAULT_PROJECT_ID}"
          echo "Using Vercel Project: $PROJECT_ID"
          # Deploy the built static assets in client/dist directly
          npx vercel deploy client/dist --prod --token "$VERCEL_TOKEN" --confirm --project "$PROJECT_ID"
